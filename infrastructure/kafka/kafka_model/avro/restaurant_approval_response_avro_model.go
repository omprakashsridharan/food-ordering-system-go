// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     restaurant_approval_response.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type RestaurantApprovalResponseAvroModel struct {
	Id string `json:"id"`

	SagaId string `json:"sagaId"`

	RestaurantId string `json:"restaurantId"`

	OrderId string `json:"orderId"`

	CreatedAt int64 `json:"createdAt"`

	OrderApprovalStatus OrderApprovalStatus `json:"orderApprovalStatus"`

	FailureMessages []string `json:"failureMessages"`
}

const RestaurantApprovalResponseAvroModelAvroCRC64Fingerprint = "T7;C\x01 _\xd0"

func NewRestaurantApprovalResponseAvroModel() RestaurantApprovalResponseAvroModel {
	r := RestaurantApprovalResponseAvroModel{}
	r.FailureMessages = make([]string, 0)

	return r
}

func DeserializeRestaurantApprovalResponseAvroModel(r io.Reader) (RestaurantApprovalResponseAvroModel, error) {
	t := NewRestaurantApprovalResponseAvroModel()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeRestaurantApprovalResponseAvroModelFromSchema(r io.Reader, schema string) (RestaurantApprovalResponseAvroModel, error) {
	t := NewRestaurantApprovalResponseAvroModel()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeRestaurantApprovalResponseAvroModel(r RestaurantApprovalResponseAvroModel, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.SagaId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.RestaurantId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OrderId, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.CreatedAt, w)
	if err != nil {
		return err
	}
	err = writeOrderApprovalStatus(r.OrderApprovalStatus, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.FailureMessages, w)
	if err != nil {
		return err
	}
	return err
}

func (r RestaurantApprovalResponseAvroModel) Serialize(w io.Writer) error {
	return writeRestaurantApprovalResponseAvroModel(r, w)
}

func (r RestaurantApprovalResponseAvroModel) Schema() string {
	return "{\"fields\":[{\"name\":\"id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"sagaId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"restaurantId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"orderId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"createdAt\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"orderApprovalStatus\",\"type\":{\"name\":\"OrderApprovalStatus\",\"symbols\":[\"APPROVED\",\"REJECTED\"],\"type\":\"enum\"}},{\"name\":\"failureMessages\",\"type\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"}}],\"name\":\"com.food.ordering.system.kafka.order.avro.model.RestaurantApprovalResponseAvroModel\",\"type\":\"record\"}"
}

func (r RestaurantApprovalResponseAvroModel) SchemaName() string {
	return "com.food.ordering.system.kafka.order.avro.model.RestaurantApprovalResponseAvroModel"
}

func (_ RestaurantApprovalResponseAvroModel) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ RestaurantApprovalResponseAvroModel) SetInt(v int32)       { panic("Unsupported operation") }
func (_ RestaurantApprovalResponseAvroModel) SetLong(v int64)      { panic("Unsupported operation") }
func (_ RestaurantApprovalResponseAvroModel) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ RestaurantApprovalResponseAvroModel) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ RestaurantApprovalResponseAvroModel) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ RestaurantApprovalResponseAvroModel) SetString(v string)   { panic("Unsupported operation") }
func (_ RestaurantApprovalResponseAvroModel) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *RestaurantApprovalResponseAvroModel) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.SagaId}

		return w

	case 2:
		w := types.String{Target: &r.RestaurantId}

		return w

	case 3:
		w := types.String{Target: &r.OrderId}

		return w

	case 4:
		w := types.Long{Target: &r.CreatedAt}

		return w

	case 5:
		w := OrderApprovalStatusWrapper{Target: &r.OrderApprovalStatus}

		return w

	case 6:
		r.FailureMessages = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.FailureMessages}

		return w

	}
	panic("Unknown field index")
}

func (r *RestaurantApprovalResponseAvroModel) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *RestaurantApprovalResponseAvroModel) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ RestaurantApprovalResponseAvroModel) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ RestaurantApprovalResponseAvroModel) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ RestaurantApprovalResponseAvroModel) HintSize(int) { panic("Unsupported operation") }
func (_ RestaurantApprovalResponseAvroModel) Finalize()    {}

func (_ RestaurantApprovalResponseAvroModel) AvroCRC64Fingerprint() []byte {
	return []byte(RestaurantApprovalResponseAvroModelAvroCRC64Fingerprint)
}

func (r RestaurantApprovalResponseAvroModel) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["sagaId"], err = json.Marshal(r.SagaId)
	if err != nil {
		return nil, err
	}
	output["restaurantId"], err = json.Marshal(r.RestaurantId)
	if err != nil {
		return nil, err
	}
	output["orderId"], err = json.Marshal(r.OrderId)
	if err != nil {
		return nil, err
	}
	output["createdAt"], err = json.Marshal(r.CreatedAt)
	if err != nil {
		return nil, err
	}
	output["orderApprovalStatus"], err = json.Marshal(r.OrderApprovalStatus)
	if err != nil {
		return nil, err
	}
	output["failureMessages"], err = json.Marshal(r.FailureMessages)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *RestaurantApprovalResponseAvroModel) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sagaId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SagaId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sagaId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["restaurantId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RestaurantId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for restaurantId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["orderId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrderId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for orderId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["createdAt"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedAt); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for createdAt")
	}
	val = func() json.RawMessage {
		if v, ok := fields["orderApprovalStatus"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrderApprovalStatus); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for orderApprovalStatus")
	}
	val = func() json.RawMessage {
		if v, ok := fields["failureMessages"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FailureMessages); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for failureMessages")
	}
	return nil
}

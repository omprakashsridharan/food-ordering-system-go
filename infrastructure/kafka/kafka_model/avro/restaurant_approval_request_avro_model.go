// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     restaurant_approval_request.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type RestaurantApprovalRequestAvroModel struct {
	Id string `json:"id"`

	SagaId string `json:"sagaId"`

	RestaurantId string `json:"restaurantId"`

	OrderId string `json:"orderId"`

	RestaurantOrderStatus RestaurantOrderStatus `json:"restaurantOrderStatus"`

	Products []Product `json:"products"`

	Price Bytes `json:"price"`

	CreatedAt int64 `json:"createdAt"`
}

const RestaurantApprovalRequestAvroModelAvroCRC64Fingerprint = "jH=,\xb0\xbc\xa2\xc9"

func NewRestaurantApprovalRequestAvroModel() RestaurantApprovalRequestAvroModel {
	r := RestaurantApprovalRequestAvroModel{}
	r.Products = make([]Product, 0)

	return r
}

func DeserializeRestaurantApprovalRequestAvroModel(r io.Reader) (RestaurantApprovalRequestAvroModel, error) {
	t := NewRestaurantApprovalRequestAvroModel()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeRestaurantApprovalRequestAvroModelFromSchema(r io.Reader, schema string) (RestaurantApprovalRequestAvroModel, error) {
	t := NewRestaurantApprovalRequestAvroModel()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeRestaurantApprovalRequestAvroModel(r RestaurantApprovalRequestAvroModel, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.SagaId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.RestaurantId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OrderId, w)
	if err != nil {
		return err
	}
	err = writeRestaurantOrderStatus(r.RestaurantOrderStatus, w)
	if err != nil {
		return err
	}
	err = writeArrayProduct(r.Products, w)
	if err != nil {
		return err
	}
	err = vm.WriteBytes(r.Price, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.CreatedAt, w)
	if err != nil {
		return err
	}
	return err
}

func (r RestaurantApprovalRequestAvroModel) Serialize(w io.Writer) error {
	return writeRestaurantApprovalRequestAvroModel(r, w)
}

func (r RestaurantApprovalRequestAvroModel) Schema() string {
	return "{\"fields\":[{\"name\":\"id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"sagaId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"restaurantId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"orderId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"restaurantOrderStatus\",\"type\":{\"name\":\"RestaurantOrderStatus\",\"symbols\":[\"PAID\"],\"type\":\"enum\"}},{\"name\":\"products\",\"type\":{\"items\":{\"fields\":[{\"logicalType\":\"uuid\",\"name\":\"id\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"int\"}],\"name\":\"Product\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"price\",\"type\":{\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2,\"type\":\"bytes\"}},{\"name\":\"createdAt\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"com.food.ordering.system.kafka.order.avro.model.RestaurantApprovalRequestAvroModel\",\"type\":\"record\"}"
}

func (r RestaurantApprovalRequestAvroModel) SchemaName() string {
	return "com.food.ordering.system.kafka.order.avro.model.RestaurantApprovalRequestAvroModel"
}

func (_ RestaurantApprovalRequestAvroModel) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ RestaurantApprovalRequestAvroModel) SetInt(v int32)       { panic("Unsupported operation") }
func (_ RestaurantApprovalRequestAvroModel) SetLong(v int64)      { panic("Unsupported operation") }
func (_ RestaurantApprovalRequestAvroModel) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ RestaurantApprovalRequestAvroModel) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ RestaurantApprovalRequestAvroModel) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ RestaurantApprovalRequestAvroModel) SetString(v string)   { panic("Unsupported operation") }
func (_ RestaurantApprovalRequestAvroModel) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *RestaurantApprovalRequestAvroModel) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.SagaId}

		return w

	case 2:
		w := types.String{Target: &r.RestaurantId}

		return w

	case 3:
		w := types.String{Target: &r.OrderId}

		return w

	case 4:
		w := RestaurantOrderStatusWrapper{Target: &r.RestaurantOrderStatus}

		return w

	case 5:
		r.Products = make([]Product, 0)

		w := ArrayProductWrapper{Target: &r.Products}

		return w

	case 6:
		w := BytesWrapper{Target: &r.Price}

		return w

	case 7:
		w := types.Long{Target: &r.CreatedAt}

		return w

	}
	panic("Unknown field index")
}

func (r *RestaurantApprovalRequestAvroModel) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *RestaurantApprovalRequestAvroModel) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ RestaurantApprovalRequestAvroModel) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ RestaurantApprovalRequestAvroModel) AppendArray() types.Field { panic("Unsupported operation") }
func (_ RestaurantApprovalRequestAvroModel) HintSize(int)             { panic("Unsupported operation") }
func (_ RestaurantApprovalRequestAvroModel) Finalize()                {}

func (_ RestaurantApprovalRequestAvroModel) AvroCRC64Fingerprint() []byte {
	return []byte(RestaurantApprovalRequestAvroModelAvroCRC64Fingerprint)
}

func (r RestaurantApprovalRequestAvroModel) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["sagaId"], err = json.Marshal(r.SagaId)
	if err != nil {
		return nil, err
	}
	output["restaurantId"], err = json.Marshal(r.RestaurantId)
	if err != nil {
		return nil, err
	}
	output["orderId"], err = json.Marshal(r.OrderId)
	if err != nil {
		return nil, err
	}
	output["restaurantOrderStatus"], err = json.Marshal(r.RestaurantOrderStatus)
	if err != nil {
		return nil, err
	}
	output["products"], err = json.Marshal(r.Products)
	if err != nil {
		return nil, err
	}
	output["price"], err = json.Marshal(r.Price)
	if err != nil {
		return nil, err
	}
	output["createdAt"], err = json.Marshal(r.CreatedAt)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *RestaurantApprovalRequestAvroModel) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sagaId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SagaId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sagaId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["restaurantId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RestaurantId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for restaurantId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["orderId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrderId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for orderId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["restaurantOrderStatus"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RestaurantOrderStatus); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for restaurantOrderStatus")
	}
	val = func() json.RawMessage {
		if v, ok := fields["products"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Products); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for products")
	}
	val = func() json.RawMessage {
		if v, ok := fields["price"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Price); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for price")
	}
	val = func() json.RawMessage {
		if v, ok := fields["createdAt"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedAt); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for createdAt")
	}
	return nil
}

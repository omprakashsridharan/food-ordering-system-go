// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     payment_response.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type PaymentResponseAvroModel struct {
	Id string `json:"id"`

	SagaId string `json:"sagaId"`

	PaymentId string `json:"paymentId"`

	CustomerId string `json:"customerId"`

	OrderId string `json:"orderId"`

	Price Bytes `json:"price"`

	CreatedAt int64 `json:"createdAt"`

	PaymentStatus PaymentStatus `json:"paymentStatus"`

	FailureMessages []string `json:"failureMessages"`
}

const PaymentResponseAvroModelAvroCRC64Fingerprint = "\xda1s\x96\x92$|\xe2"

func NewPaymentResponseAvroModel() PaymentResponseAvroModel {
	r := PaymentResponseAvroModel{}
	r.FailureMessages = make([]string, 0)

	return r
}

func DeserializePaymentResponseAvroModel(r io.Reader) (PaymentResponseAvroModel, error) {
	t := NewPaymentResponseAvroModel()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePaymentResponseAvroModelFromSchema(r io.Reader, schema string) (PaymentResponseAvroModel, error) {
	t := NewPaymentResponseAvroModel()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePaymentResponseAvroModel(r PaymentResponseAvroModel, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.SagaId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PaymentId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.CustomerId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.OrderId, w)
	if err != nil {
		return err
	}
	err = vm.WriteBytes(r.Price, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.CreatedAt, w)
	if err != nil {
		return err
	}
	err = writePaymentStatus(r.PaymentStatus, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.FailureMessages, w)
	if err != nil {
		return err
	}
	return err
}

func (r PaymentResponseAvroModel) Serialize(w io.Writer) error {
	return writePaymentResponseAvroModel(r, w)
}

func (r PaymentResponseAvroModel) Schema() string {
	return "{\"fields\":[{\"name\":\"id\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"sagaId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"paymentId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"customerId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"orderId\",\"type\":{\"logicalType\":\"uuid\",\"type\":\"string\"}},{\"name\":\"price\",\"type\":{\"logicalType\":\"decimal\",\"precision\":10,\"scale\":2,\"type\":\"bytes\"}},{\"name\":\"createdAt\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"paymentStatus\",\"type\":{\"name\":\"PaymentStatus\",\"symbols\":[\"COMPLETED\",\"CANCELLED\",\"FAILED\"],\"type\":\"enum\"}},{\"name\":\"failureMessages\",\"type\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"}}],\"name\":\"com.food.ordering.system.kafka.order.avro.model.PaymentResponseAvroModel\",\"type\":\"record\"}"
}

func (r PaymentResponseAvroModel) SchemaName() string {
	return "com.food.ordering.system.kafka.order.avro.model.PaymentResponseAvroModel"
}

func (_ PaymentResponseAvroModel) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ PaymentResponseAvroModel) SetInt(v int32)       { panic("Unsupported operation") }
func (_ PaymentResponseAvroModel) SetLong(v int64)      { panic("Unsupported operation") }
func (_ PaymentResponseAvroModel) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ PaymentResponseAvroModel) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ PaymentResponseAvroModel) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ PaymentResponseAvroModel) SetString(v string)   { panic("Unsupported operation") }
func (_ PaymentResponseAvroModel) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *PaymentResponseAvroModel) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.SagaId}

		return w

	case 2:
		w := types.String{Target: &r.PaymentId}

		return w

	case 3:
		w := types.String{Target: &r.CustomerId}

		return w

	case 4:
		w := types.String{Target: &r.OrderId}

		return w

	case 5:
		w := BytesWrapper{Target: &r.Price}

		return w

	case 6:
		w := types.Long{Target: &r.CreatedAt}

		return w

	case 7:
		w := PaymentStatusWrapper{Target: &r.PaymentStatus}

		return w

	case 8:
		r.FailureMessages = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.FailureMessages}

		return w

	}
	panic("Unknown field index")
}

func (r *PaymentResponseAvroModel) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *PaymentResponseAvroModel) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ PaymentResponseAvroModel) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ PaymentResponseAvroModel) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ PaymentResponseAvroModel) HintSize(int)                     { panic("Unsupported operation") }
func (_ PaymentResponseAvroModel) Finalize()                        {}

func (_ PaymentResponseAvroModel) AvroCRC64Fingerprint() []byte {
	return []byte(PaymentResponseAvroModelAvroCRC64Fingerprint)
}

func (r PaymentResponseAvroModel) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["sagaId"], err = json.Marshal(r.SagaId)
	if err != nil {
		return nil, err
	}
	output["paymentId"], err = json.Marshal(r.PaymentId)
	if err != nil {
		return nil, err
	}
	output["customerId"], err = json.Marshal(r.CustomerId)
	if err != nil {
		return nil, err
	}
	output["orderId"], err = json.Marshal(r.OrderId)
	if err != nil {
		return nil, err
	}
	output["price"], err = json.Marshal(r.Price)
	if err != nil {
		return nil, err
	}
	output["createdAt"], err = json.Marshal(r.CreatedAt)
	if err != nil {
		return nil, err
	}
	output["paymentStatus"], err = json.Marshal(r.PaymentStatus)
	if err != nil {
		return nil, err
	}
	output["failureMessages"], err = json.Marshal(r.FailureMessages)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *PaymentResponseAvroModel) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["sagaId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SagaId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for sagaId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["paymentId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PaymentId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for paymentId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["customerId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CustomerId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for customerId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["orderId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.OrderId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for orderId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["price"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Price); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for price")
	}
	val = func() json.RawMessage {
		if v, ok := fields["createdAt"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CreatedAt); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for createdAt")
	}
	val = func() json.RawMessage {
		if v, ok := fields["paymentStatus"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PaymentStatus); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for paymentStatus")
	}
	val = func() json.RawMessage {
		if v, ok := fields["failureMessages"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FailureMessages); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for failureMessages")
	}
	return nil
}
